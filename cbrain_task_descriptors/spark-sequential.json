{
    "name": "spark",
    "author": "Kangjoo Lee, Jean-Marc Lina, Jean Gotman, Christophe Grova", 
    "command-line": "octave --no-gui --no-init-file -q $SPARK_ROOT/SPARK.m [FMRI_DATA] [MASK] [OUT_DIR] [NB_RESAMPLING] [NETWORK_SCALES] [NB_ITERATIONS] [P_VALUE] [RESAMPLING_METHOD] [BLOCK_WINDOW_LENGTH] [DICT_INIT_METHOD] [SPARSE_CODING_METHOD] [PRESERVE_DC_ATOM] [MAX_PARALLEL_JOBS]", 
    "container-image": {
        "image": "multifunkimlab/spark:1.2.1", 
        "type": "singularity"
    }, 
    "description": "SParsity-based Analysis of Reliable K-hubness (SPARK) for brain fMRI functional connectivity", 
    "doi": "10.5281/zenodo.3257614", 
    "groups": [
        {
            "id": "bootstrap_resampling", 
            "members": [
                "nb_resampling", 
                "resampling_method", 
                "block_window_length"
            ], 
            "name": "Bootstrap resampling"
        }, 
        {
            "id": "sparse_dict_learning", 
            "members": [
                "network_scales", 
                "nb_iterations", 
                "dict_init_method", 
                "sparse_coding_method", 
                "preserve_dc_atom"
            ], 
            "name": "Sparse dictionary learning"
        }, 
        {
            "id": "k_hubness_map_generation", 
            "members": [
                "p_value"
            ], 
            "name": "k-hubness map generation"
        }
    ], 
    "inputs": [
        {
            "command-line-flag": "--fmri-data", 
            "description": "The fMRI data to analyze. (file formats: MINC, NIfTI)", 
            "id": "fmri_data", 
            "name": "fMRI data", 
            "optional": false, 
            "type": "File", 
            "value-key": "[FMRI_DATA]"
        }, 
        {
            "command-line-flag": "--mask", 
            "description": "Path to the grey-matter mask. (file formats: MINC, NIfTI)", 
            "id": "mask", 
            "name": "Grey-matter mask", 
            "optional": false, 
            "type": "File", 
            "value-key": "[MASK]"
        }, 
        {
            "command-line-flag": "--out-dir", 
            "description": "The name of the output directory.", 
            "id": "out_dir", 
            "name": "Output name", 
            "optional": false, 
            "type": "String", 
            "value-key": "[OUT_DIR]"
        }, 
        {
            "command-line-flag": "--nb-resampling", 
            "description": "Number of bootstrap resampling at the individual level. (recommended: 100)",
            "default-value": 100,
            "id": "nb_resampling", 
            "integer": true, 
            "minimum": 2, 
            "name": "Number of resampling", 
            "optional": false, 
            "type": "Number", 
            "value-key": "[NB_RESAMPLING]"
        }, 
        {
            "command-line-flag": "--network-scales", 
            "description": "Three numbers, respectively: [begin] [step] [end], used to create a regularly-spaced vector. In order to specify a single number, for instance '15', enter the same number for [begin] and [end], as: 15 1 15. This vector of numbers corresponds to the range of network scales to be tested. An optimal network scale is estimated from the specified set of numbers. (recommended: 10 2 30)",
            "default-value": [
                10,
                2,
                30
            ],
            "id": "network_scales", 
            "integer": true, 
            "list": true, 
            "max-list-entries": 3, 
            "min-list-entries": 3, 
            "minimum": 1, 
            "name": "Network scales", 
            "optional": false, 
            "type": "Number", 
            "value-key": "[NETWORK_SCALES]"
        }, 
        {
            "command-line-flag": "--nb-iterations", 
            "description": "Number of iterations for the sparse dictionary learning.  (recommended: 20)",
            "default-value": 20,
            "id": "nb_iterations", 
            "integer": true, 
            "minimum": 2, 
            "name": "Number of iterations", 
            "optional": false, 
            "type": "Number", 
            "value-key": "[NB_ITERATIONS]"
        }, 
        {
            "command-line-flag": "--p-value",
            "default-value": 0.01,
            "description": "Significance level, using a Z-test, for removing inconsistent elements in the average sparse coefficients (considered as the Gaussian noise) after spatial clustering (using a threshold).", 
            "id": "p_value", 
            "maximum": 1, 
            "minimum": 0, 
            "name": "P-Value", 
            "optional": false, 
            "type": "Number", 
            "value-key": "[P_VALUE]"
        }, 
        {
            "command-line-flag": "--resampling-method", 
            "default-value": "CBB", 
            "description": "Method (from NIAK) used to resample the data under the null hypothesis. Note: If 'CBB' is selected, the option --block-window-length is used. [CBB]: Circular-block-bootstrap sample of multiple time series. [AR1B]: Bootstrap sample of multiple time series based on a semiparametric scheme mixing an auto-regressive temporal model and i.i.d. bootstrap of the 'innovations'. [AR1G]: (Bootstrap sample of multiple time series based on a parametric model of Gaussian data with arbitrary spatial correlations and first-order auto-regressive temporal correlations.", 
            "id": "resampling_method", 
            "name": "Resampling method", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "CBB", 
                "AR1B", 
                "AR1G"
            ], 
            "value-disables": {
                "AR1B": [
                    "block_window_length"
                ], 
                "AR1G": [
                    "block_window_length"
                ], 
                "CBB": []
            }, 
            "value-key": "[RESAMPLING_METHOD]", 
            "value-requires": {
                "AR1B": [], 
                "AR1G": [], 
                "CBB": [
                    "block_window_length"
                ]
            }
        }, 
        {
            "command-line-flag": "--block-window-length", 
            "default-value": [
                10, 
                1, 
                30
            ], 
            "description": "Three numbers, respectively: [begin] [step] [end], used to create a regularly-spaced vector. In order to specify a single number, for instance '15', enter the same number for [begin] and [end], as: 15 1 15. A number in this vector corresponds to a window length used in the circular block bootstrap. The unit of the window length is \u2018time-point\u2019 with each time-point indicating a 3D scan at each TR. If multiple numbers are specified, then a number is randomly selected from the list at each resampling. It is recommended to use a minimum of sqrt(T), where T is the total number of time points in the fMRI time-course. It is also recommended to randomize the window length to reduce a bias by window size.",
            "id": "block_window_length", 
            "integer": true,
            "list": true, 
            "max-list-entries": 3, 
            "min-list-entries": 3, 
            "minimum": 1, 
            "name": "Block window length", 
            "optional": true, 
            "type": "Number", 
            "value-key": "[BLOCK_WINDOW_LENGTH]"
        }, 
        {
            "command-line-flag": "--dict-init-method", 
            "default-value": "GivenMatrix", 
            "description": "If 'GivenMatrix' is selected, then the dictionary will be initialized by a random permutation of the raw data obtained in step 1. If 'DataElements' is selected, then the dictionary will be initialized by the first N (number of atoms) columns in the raw data obtained in step 1.", 
            "id": "dict_init_method", 
            "name": "Dictionary initialization method", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "GivenMatrix", 
                "DataElements"
            ], 
            "value-key": "[DICT_INIT_METHOD]"
        }, 
        {
            "command-line-flag": "--sparse-coding-method", 
            "default-value": "Thresholding", 
            "description": "Sparse coding method for the sparse dictionary learning.", 
            "id": "sparse_coding_method", 
            "name": "Sparse coding method", 
            "optional": true, 
            "type": "String", 
            "value-choices": [
                "OMP", 
                "Thresholding"
            ], 
            "value-key": "[SPARSE_CODING_METHOD]"
        }, 
        {
            "command-line-flag": "--preserve-dc-atom", 
            "description": "If set, then the first atom will be set to a constant and will never change, while all the other atoms will be trained and updated.", 
            "id": "preserve_dc_atom", 
            "name": "Perserve first atom", 
            "optional": true, 
            "type": "Flag", 
            "value-key": "[PRESERVE_DC_ATOM]"
        }, 
        {
            "command-line-flag": "--max-parallel-jobs", 
            "default-value": 12, 
            "description": "Maximum number of jobs to run in parallel.", 
            "id": "max_parallel_jobs", 
            "name": "Number of parallel jobs", 
            "optional": true, 
            "type": "Number", 
            "value-key": "[MAX_PARALLEL_JOBS]"
        }
    ], 
    "output-files": [
        {
            "description": "Results directory containing:  k-hubness maps, atom maps and intermediate files. (file formats: MINC, NIfTI)", 
            "id": "result", 
            "name": "Results directory", 
            "optional": false, 
            "path-template": "[OUT_DIR]"
        }
    ], 
    "schema-version": "0.5", 
    "suggested-resources": {
        "cpu-cores": 2, 
        "ram": 12, 
        "walltime-estimate": 100000
    }, 
    "tags": {
        "domain": "neuroinformatics"
    }, 
    "tool-version": "v1.2.1"
}